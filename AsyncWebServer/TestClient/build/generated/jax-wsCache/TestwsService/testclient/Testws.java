
package testclient;

import java.util.concurrent.Future;
import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.ws.Action;
import javax.xml.ws.AsyncHandler;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.Response;
import javax.xml.ws.ResponseWrapper;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.2.6b20 
 * Generated source version: 2.2
 * 
 */
@WebService(name = "Testws", targetNamespace = "http://test/")
@XmlSeeAlso({
    ObjectFactory.class
})
public interface Testws {


    /**
     * 
     * @return
     *     returns javax.xml.ws.Response<testclient.GetResponse>
     */
    @WebMethod(operationName = "get")
    @RequestWrapper(localName = "get", targetNamespace = "http://test/", className = "testclient.Get")
    @ResponseWrapper(localName = "getResponse", targetNamespace = "http://test/", className = "testclient.GetResponse")
    public Response<GetResponse> getAsync();

    /**
     * 
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "get")
    @RequestWrapper(localName = "get", targetNamespace = "http://test/", className = "testclient.Get")
    @ResponseWrapper(localName = "getResponse", targetNamespace = "http://test/", className = "testclient.GetResponse")
    public Future<?> getAsync(
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetResponse> asyncHandler);

    /**
     * 
     * @return
     *     returns int
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "get", targetNamespace = "http://test/", className = "testclient.Get")
    @ResponseWrapper(localName = "getResponse", targetNamespace = "http://test/", className = "testclient.GetResponse")
    @Action(input = "http://test/Testws/getRequest", output = "http://test/Testws/getResponse")
    public int get();

    /**
     * 
     * @param str2
     * @param str1
     * @return
     *     returns java.lang.String
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "concat", targetNamespace = "http://test/", className = "testclient.Concat")
    @ResponseWrapper(localName = "concatResponse", targetNamespace = "http://test/", className = "testclient.ConcatResponse")
    @Action(input = "http://test/Testws/concatRequest", output = "http://test/Testws/concatResponse")
    public String concat(
        @WebParam(name = "str1", targetNamespace = "")
        String str1,
        @WebParam(name = "str2", targetNamespace = "")
        String str2);

    /**
     * 
     * @return
     *     returns javax.xml.ws.Response<testclient.IncResponse>
     */
    @WebMethod(operationName = "inc")
    @RequestWrapper(localName = "inc", targetNamespace = "http://test/", className = "testclient.Inc")
    @ResponseWrapper(localName = "incResponse", targetNamespace = "http://test/", className = "testclient.IncResponse")
    public Response<IncResponse> incAsync();

    /**
     * 
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "inc")
    @RequestWrapper(localName = "inc", targetNamespace = "http://test/", className = "testclient.Inc")
    @ResponseWrapper(localName = "incResponse", targetNamespace = "http://test/", className = "testclient.IncResponse")
    public Future<?> incAsync(
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<IncResponse> asyncHandler);

    /**
     * 
     * @return
     *     returns int
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "inc", targetNamespace = "http://test/", className = "testclient.Inc")
    @ResponseWrapper(localName = "incResponse", targetNamespace = "http://test/", className = "testclient.IncResponse")
    @Action(input = "http://test/Testws/incRequest", output = "http://test/Testws/incResponse")
    public int inc();

}
